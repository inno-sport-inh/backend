# Generated by Django 3.0.6 on 2020-06-02 19:01

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.expressions


class Migration(migrations.Migration):
    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('sport', '0013_merge_20200601_1757'),
    ]

    operations = [
        migrations.AlterField(
            model_name='trainer',
            name='user',
            field=models.OneToOneField(limit_choices_to={'groups__verbose_name': 'School Physical Activity for Health'},
                                       null=True, on_delete=django.db.models.deletion.CASCADE,
                                       to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddConstraint(
            model_name='attendance',
            constraint=models.CheckConstraint(check=models.Q(hours__gt=0), name='positive_hours'),
        ),
        migrations.AddConstraint(
            model_name='schedule',
            constraint=models.CheckConstraint(check=models.Q(start__lt=django.db.models.expressions.F('end')),
                                              name='schedule_start_before_end'),
        ),
        migrations.AddConstraint(
            model_name='semester',
            constraint=models.CheckConstraint(
                check=models.Q(('choice_deadline__lte', django.db.models.expressions.F('end')),
                               ('start__lte', django.db.models.expressions.F('choice_deadline'))),
                name='semester_start_before_end'),
        ),
        migrations.AddConstraint(
            model_name='training',
            constraint=models.CheckConstraint(check=models.Q(start__lt=django.db.models.expressions.F('end')),
                                              name='training_start_before_end'),
        ),
        migrations.RunSQL('''
            CREATE OR REPLACE FUNCTION check_group_capacity() RETURNS trigger AS
$$
BEGIN
    IF (SELECT count(*) FROM enroll WHERE group_id = new.group_id) >
       (SELECT capacity FROM "group" WHERE id = new.group_id) THEN
        RAISE EXCEPTION 'exceed group capacity';
    END IF;
    IF (SELECT count(*)
        FROM enroll e,
             "group" g1
        WHERE e.student_id = new.student_id
          AND e.group_id = g1.id
          AND e.is_primary = new.is_primary
          AND g1.semester_id = (
            SELECT semester_id
            FROM "group" g2
            WHERE g2.id = new.group_id
        )) > (CASE WHEN new.is_primary THEN 1 ELSE 2 END) THEN
        RAISE EXCEPTION 'too much groups';
    END IF;
    RETURN NULL;
END ;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS check_group_capacity_trigger
    ON enroll;
CREATE CONSTRAINT TRIGGER check_group_capacity_trigger
    AFTER INSERT OR UPDATE
    ON enroll
    FOR EACH ROW
EXECUTE FUNCTION check_group_capacity();


CREATE OR REPLACE FUNCTION current_semester() RETURNS int AS
$$
DECLARE
    semester_id int;
BEGIN
    SELECT id INTO STRICT semester_id FROM semester WHERE now() >= start ORDER BY start DESC LIMIT 1;
    RETURN semester_id;
END;
$$ LANGUAGE plpgsql;

ALTER TABLE training
    ADD CONSTRAINT same_date CHECK (date(start) = date("end"));
''')
    ]
